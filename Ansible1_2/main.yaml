---
- name: configure webserver with tls
  hosts: nodes
  gather_facts: true
  become: true
  vars:
    nginx_port: 443
    ssl_dir: /etc/ssl
  tasks:
    - name: create nginx repo definition
      copy:
        src: nginx.repo
        dest: /etc/yum.repos.d/nginx.repo
        owner: root
        group: root
        mode: 0644

    - name: install nginx
      yum:
        name: nginx
        update_cache: true
        state: present

    - name: copy main nginx config file
      copy:
        src: files/nginx.conf
        dest: /etc/nginx/nginx.conf
        owner: root
        group: root
        mode: 0644
      notify: restart nginx

    - name: copy site's nginx config file
      template:
        src: templates/nginx.conf.j2
        dest: /etc/nginx/conf.d/notls.conf
        owner: root
        group: root
        mode: 0644
      notify: restart nginx

    - name: copy index.html
      template:
        src: templates/index.html.j2
        dest: /usr/share/nginx/html/index.html
        owner: root
        group: root
        mode: 0644
      notify: restart nginx

    - name: copy dhparam.pem
      copy:
        src: files/dhparam.pem
        dest: /etc/nginx/dhparam.pem
        owner: root
        group: root
        mode: 0644
      notify: restart nginx

    - name: ensures ssl_dir exists
      file: path={{ ssl_dir }}/ state=directory

    - name: copy nginx-selfsigned.crt
      copy:
        src: files/nginx-selfsigned.crt
        dest: "{{ ssl_dir }}/nginx-selfsigned.crt"
        owner: root
        group: root
        mode: 0644
      notify: restart nginx

    - name: copy nginx-selfsigned.key
      copy:
        src: files/nginx-selfsigned.key
        dest: "{{ ssl_dir }}/nginx-selfsigned.key"
        owner: root
        group: root
        mode: 0700
      notify: restart nginx

    - name: ensure nginx is enabled and started
      service:
        name: nginx
        state: started
        enabled: true

    - name: insert firewalld rule for nginx
      firewalld:
        port: "{{ nginx_port }}/tcp"
        permanent: true
        state: enabled
        immediate: true
      ignore_errors: true

  post_tasks:
    - name: check web site from control server
      uri:
        url: "https://{{ ansible_host }}:{{ nginx_port }}"
        validate_certs: false
        return_content: true
      connection: local
      register: example_webpage_out
      failed_when: example_webpage_out.status != 200

  handlers:
    - name: restart nginx
      service:
        name: nginx
        state: restarted
