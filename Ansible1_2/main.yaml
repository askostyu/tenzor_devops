---
- name: configure webserver with tls
  hosts: nodes
  gather_facts: true
  become: true
  vars:
    nginx_port: 443
    self_signed_cert:
      private_path: /etc/ssl/private
      certs_path: /etc/ssl/certs
      csr_path: /etc/ssl/csr
      name: nginx-selfsigned
  tasks:
    - name: create nginx repo definition
      copy:
        src: nginx.repo
        dest: /etc/yum.repos.d/nginx.repo
        owner: root
        group: root
        mode: 0644

    - name: install nginx
      yum:
        name: nginx
        update_cache: true
        state: present

    - name: install python-setuptools
      yum:
        name: python-setuptools
        update_cache: true
        state: present

    - name: install python3
      yum:
        name: python3
        update_cache: true
        state: present

    - name: install libselinux-python3
      yum: 
        name: libselinux-python3
        update_cache: true
        state: present

    - name: upgrade pip
      pip:
        name: pip
        executable: pip3
        extra_args: --upgrade

    - name: install cryptography
      pip:
        executable: pip3
        name: cryptography

    - name: copy main nginx config file
      copy:
        src: files/nginx.conf
        dest: /etc/nginx/nginx.conf
        owner: root
        group: root
        mode: 0644
      notify: restart nginx

    - name: copy site's nginx config file
      template:
        src: templates/nginx.conf.j2
        dest: /etc/nginx/conf.d/nginx_tls.conf
        owner: root
        group: root
        mode: 0644
      notify: restart nginx

    - name: copy index.html
      template:
        src: templates/index.html.j2
        dest: /usr/share/nginx/html/index.html
        owner: root
        group: root
        mode: 0644
      notify: restart nginx

    - name: ensure ssl_private_dir exists
      file:
        path: "{{ self_signed_cert.private_path }}"
        state: directory
        owner: root
        group: root
        mode: 0600        

    - name: generate an OpenSSL private key
      vars:
        ansible_python_interpreter: /usr/bin/python3
      community.crypto.openssl_privatekey:
        path: "{{ self_signed_cert.private_path }}/{{ self_signed_cert.name }}.pem"
        size: 2048
        force: no

    - name: ensure ensure ssl_csr_dir exists
      file:
        path: "{{ self_signed_cert.csr_path }}"
        state: directory
        owner: root
        group: root
        mode: 0644

    - name: generate an OpenSSL Certificate Signing Request
      vars:
        ansible_python_interpreter: /usr/bin/python3
      community.crypto.openssl_csr:
        path: "{{ self_signed_cert.csr_path }}/{{ self_signed_cert.name }}.csr"
        privatekey_path: "{{ self_signed_cert.private_path }}/{{ self_signed_cert.name }}.pem"
    
    - name: generate a Self Signed OpenSSL certificate
      vars:
        ansible_python_interpreter: /usr/bin/python3
      community.crypto.x509_certificate:
        path: "{{ self_signed_cert.certs_path }}/{{ self_signed_cert.name }}.crt"
        privatekey_path: "{{ self_signed_cert.private_path }}/{{ self_signed_cert.name }}.pem"
        csr_path: "{{ self_signed_cert.csr_path }}/{{ self_signed_cert.name }}.csr"
        provider: selfsigned

    - name: ensure nginx is enabled and started
      service:
        name: nginx
        state: started
        enabled: true

    - name: insert firewalld rule for nginx
      firewalld:
        port: "{{ nginx_port }}/tcp"
        permanent: true
        state: enabled
        immediate: true
      ignore_errors: true

  post_tasks:
    - name: check web site from control server
      uri:
        url: "https://{{ ansible_host }}:{{ nginx_port }}"
        validate_certs: false
        return_content: true
      connection: local
      register: example_webpage_out
      failed_when: example_webpage_out.status != 200

  handlers:
    - name: restart nginx
      service:
        name: nginx
        state: restarted
